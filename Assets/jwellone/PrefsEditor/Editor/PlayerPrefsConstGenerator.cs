using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

#nullable enable

namespace jwelloneEditor
{
    public interface IPlayerPrefsConstGenerator
    {
        void Generate(IReadOnlyList<PlayerPrefsEntity> entities);
    }

    public sealed class PlayerPrefsConstGenerator : IPlayerPrefsConstGenerator
    {
        static readonly string _fileName = "PlayerPrefsConst.autogenerated.cs";
        static readonly string[] _invalidChars =
        {
            " ", "!", "\"", "#", "$","%", "&", "\'", "(", ")","-", "=", "^",  "~", "\\","|",
            "[", "{",  "@", "`","]", "}", ":",  "*", ";","+", "/", "?",  ".", ">",",", "<"
        };

        void IPlayerPrefsConstGenerator.Generate(IReadOnlyList<PlayerPrefsEntity> target)
        {
            var guids = AssetDatabase.FindAssets(string.Format("t:script {0}", Path.GetFileNameWithoutExtension(_fileName)));
            var relativePath = (guids.Length > 0) ?
                AssetDatabase.GUIDToAssetPath(guids[0]).Replace("Assets/", string.Empty) :
                _fileName;

            var sb = new StringBuilder();
            var indent = 0;

            void Append(string text, bool enableIndent = false)
            {
                if (enableIndent)
                {
                    for (var i = 0; i < indent; ++i)
                    {
                        sb!.Append("\t");
                    }
                }

                sb!.Append(text);
            }

            void AppendLine(string text, bool enableIndent = false)
            {
                Append(text, enableIndent);
                sb!.AppendLine("");
            }

            AppendLine("// =================================================");
            AppendLine("// This is an automatically generated file.");
            AppendLine("// Unable to edit.");
            AppendLine($"// Create by class PlayerPrefsConstGenerator.");
            AppendLine("// =================================================");
            AppendLine("public static partial class PlayerPrefsConst");
            AppendLine("{");

            ++indent;

            var entities = new List<PlayerPrefsEntity>(target);
            entities.Sort((a, b) => string.Compare(a.key, b.key));

            for (var i = 0; i < entities.Count; ++i)
            {
                var entity = entities[i];
                var valueName = entity.key;
                Array.ForEach(_invalidChars, c => valueName = valueName.Replace(c, ""));
                Append("public static readonly string KEY_", true);
                Append(valueName.ToUpper());
                Append(" = \"");
                Append(entity.key);
                AppendLine("\";");
            }

            --indent;

            AppendLine("}");

            var fullPath = Path.Combine(Application.dataPath, relativePath);
            using (var stream = new StreamWriter(fullPath, false, Encoding.UTF8))
            {
                stream.NewLine = "\r\n";
                stream.Write(sb.ToString().Replace(Environment.NewLine, stream.NewLine));
                Debug.Log($"{fullPath} generated.");
            }

            if (guids.Length > 0)
            {
                var assetPath = AssetDatabase.GUIDToAssetPath(guids[0]);
                AssetDatabase.ImportAsset(assetPath, ImportAssetOptions.ForceUpdate);
            }
        }
    }
}